<!DOCTYPE html>
<html lang="es">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Calculadora de Producción</title>
  <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    body {
      background: linear-gradient(135deg, #1a2a6c, #b21f1f, #fdbb2d);
      min-height: 100vh;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .container {
      max-width: 800px;
      margin: 0 auto;
      background: white;
      border-radius: 15px;
      padding: 30px;
      box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
      margin-top: 20px;
    }

    .input-group {
      position: relative;
      margin-bottom: 15px;
    }

    .input-group input {
      width: 100%;
      padding: 12px;
      padding-right: 60px;
      border: 1px solid #ddd;
      border-radius: 5px;
      font-size: 16px;
    }

    .input-group .unit {
      position: absolute;
      right: 15px;
      top: 50%;
      transform: translateY(-50%);
      color: #555;
      font-weight: 500;
    }

    .btn {
      padding: 12px 20px;
      border: none;
      border-radius: 5px;
      font-size: 16px;
      cursor: pointer;
      transition: all 0.3s;
      display: inline-flex;
      align-items: center;
      justify-content: center;
    }

    .btn-primary {
      background: #4CAF50;
      color: white;
    }

    .btn-primary:hover {
      background: #45a049;
    }

    .btn-secondary {
      background: #6c757d;
      color: white;
    }

    .btn-secondary:hover {
      background: #5a6268;
    }

    .btn-success {
      background: #28a745;
      color: white;
    }

    .btn-success:hover {
      background: #218838;
    }

    .btn-warning {
      background: #ffc107;
      color: #212529;
    }

    .btn-warning:hover {
      background: #e0a800;
    }

    .result-card {
      margin-top: 20px;
      padding: 15px;
      background: #f8f9fa;
      border-left: 5px solid #4CAF50;
      font-size: 18px;
      font-weight: bold;
    }

    .hourly-result {
      margin-top: 20px;
      padding: 15px;
      background: #e8f5e9;
      border-left: 5px solid #28a745;
    }

    .divider {
      margin: 20px 0;
      border-top: 1px solid #eee;
    }

    .error-message {
      color: #dc3545;
      font-size: 14px;
      margin-top: 5px;
    }

    .efficiency-section {
      background-color: #f8f9fa;
      border-radius: 8px;
      padding: 15px;
      margin-top: 20px;
    }
  </style>
</head>

<body>
  <div id="root"></div>

  <script type="text/babel">
    const { useState } = React;

        function App() {
            const [formData, setFormData] = useState({
                velocidad: '',
                ancho: '',
                gramaje: '',
                tiempo: '',
                eficiencia: ''
            });
            const [result, setResult] = useState(null);
            const [hours, setHours] = useState('');
            const [hourlyCalculation, setHourlyCalculation] = useState(null);
            const [showEfficiencySection, setShowEfficiencySection] = useState(false);

            const handleChange = (e) => {
                const { name, value } = e.target;
                setFormData(prev => ({
                    ...prev,
                    [name]: value
                }));
            };

            const handleSubmit = (e) => {
                e.preventDefault();
                
                // Validación básica
                if (!formData.velocidad || !formData.ancho || !formData.gramaje || !formData.tiempo) {
                    alert('Por favor completa todos los campos requeridos');
                    return;
                }

                // Cálculo sin eficiencia (100%)
                const velocidad = parseFloat(formData.velocidad);
                const ancho = parseFloat(formData.ancho);
                const gramaje = parseFloat(formData.gramaje);
                const tiempo = parseFloat(formData.tiempo);
                
                const resultado = (velocidad * ancho * gramaje * tiempo) / 1000000;
                
                setResult({
                    ...formData,
                    resultado: resultado.toFixed(4),
                    eficiencia: null // Indicar que no se usó eficiencia
                });
                
                // Mostrar sección de eficiencia después del primer cálculo
                setShowEfficiencySection(true);
                setHourlyCalculation(null);
            };

            const handleApplyEfficiency = () => {
                if (!formData.eficiencia) {
                    alert('Por favor ingresa un valor de eficiencia');
                    return;
                }

                const velocidad = parseFloat(formData.velocidad);
                const ancho = parseFloat(formData.ancho);
                const gramaje = parseFloat(formData.gramaje);
                const tiempo = parseFloat(formData.tiempo);
                const eficiencia = parseFloat(formData.eficiencia) / 100;
                
                const resultado = (velocidad * ancho * gramaje * tiempo * eficiencia) / 1000000;
                
                setResult({
                    ...formData,
                    resultado: resultado.toFixed(4),
                    eficiencia: formData.eficiencia
                });
            };

            const handleClear = () => {
                setFormData({
                    velocidad: '',
                    ancho: '',
                    gramaje: '',
                    tiempo: '',
                    eficiencia: ''
                });
                setResult(null);
                setHours('');
                setHourlyCalculation(null);
                setShowEfficiencySection(false);
            };

            const calculateByHours = () => {
                if (!formData.velocidad || !formData.ancho || !formData.gramaje || !hours) {
                    alert('Completa los campos de velocidad, ancho, gramaje y horas');
                    return;
                }

                const velocidad = parseFloat(formData.velocidad);
                const ancho = parseFloat(formData.ancho);
                const gramaje = parseFloat(formData.gramaje);
                const horas = parseFloat(hours);
                
                const productionPerHour = (velocidad * ancho * gramaje * 60) / 1000000;
                const totalProduction = productionPerHour * horas;
                
                setHourlyCalculation({
                    hours: horas,
                    totalProduction
                });
            };

            return (
                <div className="container">
                    <div className="text-center mb-6">
                        <h1 className="text-2xl font-bold text-gray-800 flex items-center justify-center">
                            <i className="fas fa-calculator text-blue-600 mr-3"></i>
                            Calculadora de Producción
                        </h1>
                        <p className="text-gray-600">Calcula la tasa de producción de papel</p>
                    </div>

                    <form onSubmit={handleSubmit}>
                        <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                Velocidad del Papel (m/min)
                            </label>
                            <div className="input-group">
                                <input
                                    type="number"
                                    name="velocidad"
                                    value={formData.velocidad}
                                    onChange={handleChange}
                                    step="0.01"
                                    min="0"
                                    placeholder="Ej: 1100"
                                    className="w-full p-2 border border-gray-300 rounded"
                                />
                                <span className="unit">m/min</span>
                            </div>
                        </div>

                        <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                Ancho del Rollo (m)
                            </label>
                            <div className="input-group">
                                <input
                                    type="number"
                                    name="ancho"
                                    value={formData.ancho}
                                    onChange={handleChange}
                                    step="0.001"
                                    min="0"
                                    placeholder="Ej: 2.750"
                                    className="w-full p-2 border border-gray-300 rounded"
                                />
                                <span className="unit">m</span>
                            </div>
                        </div>

                        <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                Gramaje del Material (g/m²)
                            </label>
                            <div className="input-group">
                                <input
                                    type="number"
                                    name="gramaje"
                                    value={formData.gramaje}
                                    onChange={handleChange}
                                    step="0.01"
                                    min="0"
                                    placeholder="Ej: 21"
                                    className="w-full p-2 border border-gray-300 rounded"
                                />
                                <span className="unit">g/m²</span>
                            </div>
                        </div>

                        <div className="mb-4">
                            <label className="block text-sm font-medium text-gray-700 mb-1">
                                Tiempo de Medición (min)
                            </label>
                            <div className="input-group">
                                <input
                                    type="number"
                                    name="tiempo"
                                    value={formData.tiempo}
                                    onChange={handleChange}
                                    step="0.1"
                                    min="0"
                                    placeholder="Ej: 60"
                                    className="w-full p-2 border border-gray-300 rounded"
                                />
                                <span className="unit">min</span>
                            </div>
                        </div>

                        <div className="flex flex-col sm:flex-row gap-3 mb-6">
                            <button
                                type="submit"
                                className="btn btn-primary flex-1"
                            >
                                <i className="fas fa-calculator mr-2"></i>
                                Calcular Tasa
                            </button>
                            <button
                                type="button"
                                onClick={handleClear}
                                className="btn btn-secondary"
                            >
                                <i className="fas fa-eraser mr-2"></i>
                                Limpiar
                            </button>
                        </div>

                        {/* Resultado principal - se muestra inmediatamente después de calcular */}
                        {result && (
                            <div className="result-card">
                                <h3 className="text-lg font-semibold mb-2">Resultado del Cálculo</h3>
                                <div className="text-2xl font-bold text-blue-600">
                                    {result.resultado} toneladas
                                </div>
                                <div className="mt-3 text-gray-600">
                                    <p>Velocidad: {result.velocidad} m/min</p>
                                    <p>Ancho: {result.ancho} m</p>
                                    <p>Gramaje: {result.gramaje} g/m²</p>
                                    <p>Tiempo: {result.tiempo} min</p>
                                    {result.eficiencia && <p>Eficiencia aplicada: {result.eficiencia}%</p>}
                                    {!result.eficiencia && <p>Eficiencia: 100% (predeterminado)</p>}
                                </div>
                            </div>
                        )}

                        {/* Sección de eficiencia - aparece después del primer cálculo */}
                        {showEfficiencySection && (
                            <div className="efficiency-section">
                                <h4 className="text-md font-medium text-gray-800 mb-4 flex items-center">
                                    <i className="fas fa-percentage text-blue-600 mr-2"></i>
                                    Ajustar por Eficiencia (Opcional)
                                </h4>
                                
                                <div className="mb-4">
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Eficiencia de Planta (%)
                                    </label>
                                    <div className="input-group">
                                        <input
                                            type="number"
                                            name="eficiencia"
                                            value={formData.eficiencia}
                                            onChange={handleChange}
                                            step="0.1"
                                            min="1"
                                            max="100"
                                            placeholder="Ej: 85"
                                            className="w-full p-2 border border-gray-300 rounded"
                                        />
                                        <span className="unit">%</span>
                                    </div>
                                </div>
                                
                                <button
                                    type="button"
                                    onClick={handleApplyEfficiency}
                                    disabled={!formData.eficiencia}
                                    className="btn btn-warning"
                                >
                                    <i className="fas fa-sync-alt mr-2"></i>
                                    Aplicar Eficiencia
                                </button>
                            </div>
                        )}

                        <div className="divider"></div>

                        <div className="mb-4">
                            <h4 className="text-md font-medium text-gray-800 mb-4 flex items-center">
                                <i className="fas fa-clock text-blue-600 mr-2"></i>
                                Calcular Producción por Horas
                            </h4>
                            
                            <div className="flex flex-col sm:flex-row gap-3 items-end">
                                <div className="flex-1">
                                    <label className="block text-sm font-medium text-gray-700 mb-1">
                                        Número de Horas
                                    </label>
                                    <input
                                        type="number"
                                        value={hours}
                                        onChange={(e) => setHours(e.target.value)}
                                        step="0.1"
                                        min="0"
                                        placeholder="Ej: 8"
                                        className="w-full p-2 border border-gray-300 rounded"
                                    />
                                </div>
                                
                                <button
                                    type="button"
                                    onClick={calculateByHours}
                                    disabled={!hours}
                                    className="btn btn-success"
                                >
                                    <i className="fas fa-clock mr-2"></i>
                                    Calcular
                                </button>
                            </div>
                        </div>
                    </form>

                    {hourlyCalculation && (
                        <div className="hourly-result">
                            <div className="flex items-center mb-2">
                                <div className="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center mr-2">
                                    <i className="fas fa-clock text-white text-xs"></i>
                                </div>
                                <h5 className="font-medium text-green-800">Producción en {hourlyCalculation.hours} horas</h5>
                            </div>
                            <div className="text-2xl font-bold text-green-800">
                                {hourlyCalculation.totalProduction.toFixed(4)} toneladas
                            </div>
                            <div className="text-sm text-green-600 mt-1">
                                Promedio: {(hourlyCalculation.totalProduction / hourlyCalculation.hours).toFixed(4)} toneladas/hora
                            </div>
                        </div>
                    )}
                </div>
            );
        }

        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
</body>

</html>
